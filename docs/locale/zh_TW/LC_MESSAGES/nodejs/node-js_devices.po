# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, IBM Corporation
# This file is distributed under the same license as the IBM IOT Foundation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IBM IOT Foundation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-19 15:21+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\docs\nodejs\node-js_devices.rst:2
msgid "Node.js Client Library - Devices"
msgstr ""
"Node.js 用戶端程式庫 - 裝置"

#: ..\docs\nodejs\node-js_devices.rst:4
msgid "The node.js client is used for simplifying the interacting with the Internet of Things Foundation. This client library contains instruction and guidance on using the Node.js with the Internet of Things Foundation to interact with your devices and applications."
msgstr ""
"node.js 用戶端可用來簡化與 Internet of Things Foundation 的互動。此用戶端程式庫包含使用 Node.js 與 Internet of Things Foundation 搭配以與裝置及應用程式互動的指示和指引。"

#: ..\docs\nodejs\node-js_devices.rst:6
msgid "The client library is divided into two parts, Devices and Applications. The Devices section contains information on how devices publish events and handle commands using node.js, and the Applications section contains information on how applications can use the node.js Internet of Things Foundation module to interact with devices."
msgstr ""
"此用戶端程式庫分成兩個部分：「裝置」及「應用程式」。「裝置」區段包含裝置如何使用 nodejs 發佈事件及處理指令的相關資訊，「應用程式」區段則包含應用程式如何使用 node.js Internet of Things Foundation 模組與裝置互動的相關資訊。"

#: ..\docs\nodejs\node-js_devices.rst:8
msgid "*IotfDevice* is the device client for the Internet of Things Foundation service. You can use this client to connect to the service, publish events from the device and subscribe to commands."
msgstr ""
"*IotfDevice* 是 Internet of Things Foundation 服務的裝置用戶端。您可以使用此用戶端連接至服務、從裝置發佈事件，以及訂閱指令。"

#: ..\docs\nodejs\node-js_devices.rst:11
msgid "Constructor"
msgstr ""
"建構子"

#: ..\docs\nodejs\node-js_devices.rst:13
msgid "The constructor builds the device client instance. It accepts a configuration json containing the following definitions:"
msgstr ""
"建構子會建置裝置用戶端實例。它接受包含下列定義的配置 json："

#: ..\docs\nodejs\node-js_devices.rst:15
msgid "org - Your organization ID"
msgstr ""
"org - 組織 ID"

#: ..\docs\nodejs\node-js_devices.rst:16
msgid "type - The type of your device"
msgstr ""
"type - 裝置的類型"

#: ..\docs\nodejs\node-js_devices.rst:17
msgid "id - The ID of your device"
msgstr ""
"id - 裝置的 ID"

#: ..\docs\nodejs\node-js_devices.rst:18
msgid "auth-method - Method of authentication (the only value currently supported is “token”)"
msgstr ""
"auth-method - 鑑別的方法（目前唯一支援的值是“token”）"

#: ..\docs\nodejs\node-js_devices.rst:19
msgid "auth-token - API key token (required if auth-method is “token”)"
msgstr ""
"auth-token - API 金鑰記號（如果 auth-method 為“token”則需要）"

#: ..\docs\nodejs\node-js_devices.rst:21
msgid "If you want to use quickstart, then send only the first three properties."
msgstr ""
"如果您要使用 Quickstart，請只傳送前三個內容。"

#: ..\docs\nodejs\node-js_devices.rst:37
msgid "Using a configuration file"
msgstr ""
"使用配置檔"

#: ..\docs\nodejs\node-js_devices.rst:39
msgid "Instead of passing the configuration json directly, you can also use a configuration file. Use the following code snippet:"
msgstr ""
"您也可以使用配置檔，而不需要直接傳遞配置 json。請使用下列程式碼 Snippet："

#: ..\docs\nodejs\node-js_devices.rst:48
msgid "The configuration file must be in the format of"
msgstr ""
"配置檔的格式必須如下"

#: ..\docs\nodejs\node-js_devices.rst:59
msgid "Connecting to the Internet of Things Foundation"
msgstr ""
"連接至 Internet of Things Foundation"

#: ..\docs\nodejs\node-js_devices.rst:61
msgid "Connect to the Internet of Things Foundation by calling the *connect* function."
msgstr ""
"呼叫 *connect* 函數以連接至 Internet of Things Foundation。"

#: ..\docs\nodejs\node-js_devices.rst:76
msgid "After the successful connection to the IoTF service, the device client sends a *connect* event. So all the device logic can be implemented inside this callback function."
msgstr ""
"成功連線至 IoTF 服務之後，裝置用戶端會傳送 *connect* 事件。因此所有裝置邏輯都可以在此回呼函數內實作。"

#: ..\docs\nodejs\node-js_devices.rst:79
msgid "Publishing events"
msgstr ""
"發佈事件"

#: ..\docs\nodejs\node-js_devices.rst:81
msgid "Events are the mechanism by which devices publish data to the Internet of Things Foundation. The device controls the content of the event and assigns a name for each event it sends."
msgstr ""
"事件是裝置藉以將資料發佈到 Internet of Things Foundation 的機制。裝置可控制事件的內容，並為它傳送的每一個事件指派一個名稱。"

#: ..\docs\nodejs\node-js_devices.rst:83
msgid "When an event is received by the IOT Foundation the credentials of the connection on which the event was received are used to determine from which device the event was sent. With this architecture it is impossible for a device to impersonate another device."
msgstr ""
"當 IoT Foundation 接收事件時，會使用接收事件的連線認證來判斷是哪個裝置傳送了事件。使用此架構，裝置就不可能假冒成另一個裝置。"

#: ..\docs\nodejs\node-js_devices.rst:85
msgid "Events can be published at any of the three quality of service levels defined by the MQTT protocol. By default events will be published as QoS level 0. Please not that if you are using the Internet of Things Quickstart service, events can only be published at QoS level 0."
msgstr ""
"發佈的事件可以是 MQTT 通訊協定所定義的三個服務品質等級之一。依預設，事件會發佈為 QoS 等級 0。請注意，如果您是使用 Internet of Things Quickstart 服務，事件只能發佈為 QoS 等級 0。"

#: ..\docs\nodejs\node-js_devices.rst:87
msgid "Events can be published by using: -   eventType - Type of event to be published e.g status, gps. -   eventFormat - Format of the event e.g json. -   data - Payload of the event. -   QoS - MQTT quality of service for the publish event. Supported values : 0,1,2."
msgstr ""
"可使用下列各項來發佈事件：-   eventType - 要發佈的事件類型，例如：status、gps。-   eventFormat - 事件的格式，例如：json。-   data - 事件的內容。-   QoS - 發佈事件的 MQTT 服務品質。支援的值：0、1、2。"

#: ..\docs\nodejs\node-js_devices.rst:110
msgid "Handling commands"
msgstr ""
"處理指令"

#: ..\docs\nodejs\node-js_devices.rst:112
msgid "When the device client connects, it automatically subscribes to any command for this device. To process specific commands you need to register a command callback function. The device client sends *command* when a command is received. The callback function has the following properties."
msgstr ""
"當裝置用戶端連接時，它會自動訂閱此裝置的任何指令。若要處理特定指令，您需要登錄指令回呼函數。收到指令時，裝置用戶端會傳送 *command*。回呼函數具有下列內容。"

#: ..\docs\nodejs\node-js_devices.rst:114
msgid "commandName - name of the command invoked"
msgstr ""
"commandName - 呼叫的指令名稱"

#: ..\docs\nodejs\node-js_devices.rst:115
msgid "format - e.g json, xml"
msgstr ""
"格式 - 例如 json、xml"

#: ..\docs\nodejs\node-js_devices.rst:116
msgid "payload - payload for the command"
msgstr ""
"payload - 指令的內容"

#: ..\docs\nodejs\node-js_devices.rst:117
msgid "topic - actual topic where the command was received"
msgstr ""
"topic - 收到指令的實際主題"

#: ..\docs\nodejs\node-js_devices.rst:143
msgid "Disconnect Client"
msgstr ""
"中斷連接用戶端"

#: ..\docs\nodejs\node-js_devices.rst:145
msgid "Disconnects the client and releases the connections"
msgstr ""
"切斷用戶端並釋放連線"

#: ..\docs\nodejs\node-js_devices.rst:167
msgid "Check Connection Status"
msgstr ""
"檢查連線狀態"

#: ..\docs\nodejs\node-js_devices.rst:169
msgid "*isConnected* gives the current status of the client connection"
msgstr ""
"*isConnected* 會提供用戶端連線的現行狀態"

