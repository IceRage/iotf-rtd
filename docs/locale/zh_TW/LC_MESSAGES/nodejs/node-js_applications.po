# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, IBM Corporation
# This file is distributed under the same license as the IBM IOT Foundation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IBM IOT Foundation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-12-17 09:49-0600\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../nodejs/node-js_applications.rst:2
msgid "Node.js Client Library - Applications"
msgstr ""
"Node.js 用戶端程式庫 - 應用程式"

#: ../nodejs/node-js_applications.rst:4
msgid "The node.js client is used for simplifying the interacting with the Internet of Things Foundation. This client library contains instruction and guidance on using node.js with Internet of Things Foundation to interact with you devices and applications."
msgstr ""
"node.js 用戶端可用來簡化與 Internet of Things Foundation 的互動。此用戶端程式庫包含使用 node.js 與 Internet of Things Foundation 搭配以與裝置及應用程式互動的指示和指引。"

#: ../nodejs/node-js_applications.rst:6
msgid "This client library is divided into two parts, Devices and Applications. The Devices section contains information on how devices publish events and handle commands using the node.js Internet of Things Foundation module, and the Applications section contains information on how applications can use the nodejs ibmiotf module to interact with devices."
msgstr ""
"此用戶端程式庫分成兩個部分：「裝置」及「應用程式」。「裝置」區段包含裝置如何使用 node.js Internet of Things Foundation 模組發佈事件及處理指令的相關資訊，「應用程式」區段則包含應用程式如何使用 nodejs ibmiotf 模組與裝置互動的相關資訊。"

#: ../nodejs/node-js_applications.rst:8
msgid "*IotfApplication* is the application client for the Internet of Things Foundation service. This section contains information on how applications interact with devices."
msgstr ""
"*IotfApplication* 是 Internet of Things Foundation 服務的應用程式用戶端。這個區段包含應用程式如何與裝置互動的相關資訊。"

#: ../nodejs/node-js_applications.rst:11
msgid "Constructor"
msgstr ""
"建構子"

#: ../nodejs/node-js_applications.rst:13
msgid "The constructor builds the application client instance. It accepts an configuration json containing the following : - org - Your organization ID - id - The unique ID of your application within your organization. - auth-key - API key - auth-token - API key token"
msgstr ""
"建構子會建置應用程式用戶端實例。它接受包含下列項目的配置 json：- org - 組織 ID - id - 組織內應用程式的唯一 ID。- auth-key - API 金鑰 - auth-token - API 金鑰記號"

#: ../nodejs/node-js_applications.rst:19
msgid "If you want to use quickstart, then send only the first two properties."
msgstr ""
"如果您要使用 Quickstart，請只傳送前兩個內容。"

#: ../nodejs/node-js_applications.rst:34
msgid "Using a configuration file"
msgstr ""
"使用配置檔"

#: ../nodejs/node-js_applications.rst:36
msgid "Instead of passing the configuration json directly, you can also use a configuration file. Use the following code snippet"
msgstr ""
"您也可以使用配置檔，而不需要直接傳遞配置 json。請使用下列程式碼 Snippet"

#: ../nodejs/node-js_applications.rst:45
msgid "The configuration file must be in the format of"
msgstr ""
"配置檔的格式必須如下"

#: ../nodejs/node-js_applications.rst:55
msgid "Connecting to the Internet of Things Foundation"
msgstr ""
"連接至 Internet of Things Foundation"

#: ../nodejs/node-js_applications.rst:57
msgid "Connect to the Internet of Things Foundation by calling the *connect* function."
msgstr ""
"呼叫 *connect* 函數以連接至 Internet of Things Foundation。"

#: ../nodejs/node-js_applications.rst:73
msgid "After the successful connection to the IoTF service, the application client sends a *connect* event. So all the logic can be implemented inside this callback function."
msgstr ""
"成功連線至 IoTF 服務之後，應用程式用戶端會傳送 *connect* 事件。因此所有邏輯都可以在此回呼函數內實作。"

#: ../nodejs/node-js_applications.rst:76
msgid "Subscribing to device events"
msgstr ""
"訂閱裝置事件"

#: ../nodejs/node-js_applications.rst:78
msgid "Events are the mechanism by which devices publish data to the Internet of Things Foundation. The device controls the content of the event and assigns a name for each event it sends."
msgstr ""
"事件是裝置藉以將資料發佈到 Internet of Things Foundation 的機制。裝置可控制事件的內容，並為它傳送的每一個事件指派一個名稱。"

#: ../nodejs/node-js_applications.rst:80
msgid "When an event is received by the Internet of Things Foundation, the credentials of the connection on which the event was received are used to determine from which device the event was sent. Using this architecture, it is impossible for a device to impersonate another device."
msgstr ""
"當 Internet of Things Foundation 接收事件時，會使用接收事件的連線認證來判斷是哪個裝置傳送了事件。使用此架構，裝置就不可能假冒成另一個裝置。"

#: ../nodejs/node-js_applications.rst:82
msgid "By default, applications will subscribe to all events from all connected devices. Use the type, id, event and msgFormat parameters to control the scope of the subscription. A single client can support multiple subscriptions. The code samples below give examples of how to subscribe to devices dependent on device type, id, event and msgFormat parameters."
msgstr ""
"依預設，應用程式將訂閱所有已連接裝置的所有事件。可使用 type、id、event 和 msgFormat 參數來控制訂閱的範圍。單一用戶端可以支援多個訂閱。下列程式碼範例示範如何根據裝置的 type、id、event 和 msgFormat 參數來訂閱裝置。"

#: ../nodejs/node-js_applications.rst:85
msgid "To subscribe to all events from all devices"
msgstr ""
"訂閱所有裝置的所有事件"

#: ../nodejs/node-js_applications.rst:103
msgid "To subscribe to all events from all devices of a specific type"
msgstr ""
"訂閱特定類型的所有裝置的所有事件"

#: ../nodejs/node-js_applications.rst:120
msgid "To subscribe to a specific event from all devices"
msgstr ""
"訂閱所有裝置的特定事件"

#: ../nodejs/node-js_applications.rst:138
msgid "To subscribe to a specific event from two or more different devices"
msgstr ""
"訂閱兩個以上不同裝置的特定事件"

#: ../nodejs/node-js_applications.rst:156
msgid "To subscribe to all events published by a device in json format"
msgstr ""
"訂閱裝置已發佈且為 Json 格式的所有事件"

#: ../nodejs/node-js_applications.rst:175
msgid "Handling events from devices"
msgstr ""
"處理裝置的事件"

#: ../nodejs/node-js_applications.rst:177
msgid "To process the events received by your subscriptions you need to implement a device event callback method. The ibmiotf application client emits the event *deviceEvent*. This function has the following properties:"
msgstr ""
"若要處理訂閱所接收的事件，您需要實作裝置事件回呼方法。ibmiotf 應用程式用戶端會發出 *deviceEvent* 事件。這個函數具有下列內容："

#: ../nodejs/node-js_applications.rst:179
#: ../nodejs/node-js_applications.rst:273
msgid "deviceType"
msgstr ""
"deviceType"

#: ../nodejs/node-js_applications.rst:180
#: ../nodejs/node-js_applications.rst:274
msgid "deviceId"
msgstr ""
"deviceId"

#: ../nodejs/node-js_applications.rst:181
msgid "eventType"
msgstr ""
"eventType"

#: ../nodejs/node-js_applications.rst:182
msgid "format"
msgstr ""
"format"

#: ../nodejs/node-js_applications.rst:183
msgid "payload - Device event payload"
msgstr ""
"payload - 裝置事件內容"

#: ../nodejs/node-js_applications.rst:184
msgid "topic - Original topic"
msgstr ""
"topic - 原始主題"

#: ../nodejs/node-js_applications.rst:208
msgid "Subscribing to device status"
msgstr ""
"訂閱裝置狀態"

#: ../nodejs/node-js_applications.rst:210
msgid "By default, this will subscribe to status updates for all connected devices. Use the type and id parameters to control the scope of the subscription. A single client can support multiple subscriptions."
msgstr ""
"依預設，這會訂閱所有已連接裝置的狀態更新項目。可使用 type 和 id 參數來控制訂閱的範圍。單一用戶端可以支援多個訂閱。"

#: ../nodejs/node-js_applications.rst:213
msgid "Subscribe to status updates for all devices"
msgstr ""
"訂閱所有裝置的狀態更新項目"

#: ../nodejs/node-js_applications.rst:232
msgid "Subscribe to status updates for all devices of a specific type"
msgstr ""
"訂閱特定類型的所有裝置的狀態更新項目"

#: ../nodejs/node-js_applications.rst:250
msgid "Subscribe to status updates for two different devices"
msgstr ""
"訂閱兩個不同裝置的狀態更新項目"

#: ../nodejs/node-js_applications.rst:269
msgid "Handling status updates from devices"
msgstr ""
"處理裝置的狀態更新項目"

#: ../nodejs/node-js_applications.rst:271
msgid "To process the status updates received by your subscriptions you need to implement an device status callback method. The ibmiotf application client emits the event *deviceStatus*. This function has the following properties:"
msgstr ""
"若要處理訂閱所接收的狀態更新，您需要實作裝置狀態回呼方法。ibmiotf 應用程式用戶端會發出 *deviceStatus* 事件。這個函數具有下列內容："

#: ../nodejs/node-js_applications.rst:275
msgid "payload - Device status payload"
msgstr ""
"payload - 裝置狀態內容"

#: ../nodejs/node-js_applications.rst:276
msgid "topic"
msgstr ""
"topic"

#: ../nodejs/node-js_applications.rst:300
msgid "Publishing events from devices"
msgstr ""
"從裝置發佈事件"

#: ../nodejs/node-js_applications.rst:302
msgid "Applications can publish events as if they originated from a Device. The function requires:"
msgstr ""
"應用程式可當成事件是從裝置產生來發佈事件。該函數需要："

#: ../nodejs/node-js_applications.rst:304
#: ../nodejs/node-js_applications.rst:331
msgid "DeviceType"
msgstr ""
"裝置類型"

#: ../nodejs/node-js_applications.rst:305
#: ../nodejs/node-js_applications.rst:332
msgid "Device ID"
msgstr ""
"裝置 ID"

#: ../nodejs/node-js_applications.rst:306
msgid "Event Type"
msgstr ""
"事件類型"

#: ../nodejs/node-js_applications.rst:307
#: ../nodejs/node-js_applications.rst:334
msgid "Format"
msgstr ""
"格式"

#: ../nodejs/node-js_applications.rst:308
#: ../nodejs/node-js_applications.rst:335
msgid "Data"
msgstr ""
"資料"

#: ../nodejs/node-js_applications.rst:327
msgid "Publishing commands to devices"
msgstr ""
"對裝置發佈指令"

#: ../nodejs/node-js_applications.rst:329
msgid "Applications can publish commands to connected devices. The function requires:"
msgstr ""
"應用程式可對連接的裝置發佈指令。該函數需要："

#: ../nodejs/node-js_applications.rst:333
msgid "Command Type"
msgstr ""
"指令類型"

#: ../nodejs/node-js_applications.rst:354
msgid "Disconnect Client"
msgstr ""
"中斷連接用戶端"

#: ../nodejs/node-js_applications.rst:356
msgid "Disconnects the client and releases the connections"
msgstr ""
"切斷用戶端並釋放連線"

#: ../nodejs/node-js_applications.rst:376
msgid "Check Connection Status"
msgstr ""
"檢查連線狀態"

#: ../nodejs/node-js_applications.rst:378
msgid "*isConnected* gives the current status of the application client connection"
msgstr ""
"*isConnected* 會提供應用程式用戶端連線的現行狀態"

