# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, IBM Corporation
# This file is distributed under the same license as the IBM IOT Foundation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IBM IOT Foundation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-12-17 09:49-0600\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../libraries/mBed_C++.rst:2
msgid "mBed C++ Client Library"
msgstr ""
"mBed C++ 클라이언트 라이브러리"

#: ../libraries/mBed_C++.rst:4
msgid "The `mBed C++ client library <https://developer.mbed.org/teams/IBM_IoT/code/IBMIoTF/>`_ can be used to connect `mBed devices <https://www.mbed.com/en/>`__ like `LPC1768 <https://developer.mbed.org/platforms/mbed-LPC1768/>`__, `FRDM-K64F <https://developer.mbed.org/platforms/FRDM-K64F/>`__ and etc.. to IBM Internet of Things Foundation Cloud service with ease. Although the library uses C++, it still avoids dynamic memory allocations and use of STL functions as the mBed devices sometimes have idiosyncratic memory models which make porting difficult. In any case, the library allows one to make memory use as predictable as possible."
msgstr ""
"`mBed C++ 클라이언트 라이브러리 <https://developer.mbed.org/teams/IBM_IoT/code/IBMIoTF/>`_를 사용하여 `LPC1768 <https://developer.mbed.org/platforms/mbed-LPC1768/>`__, `FRDM-K64F <https://developer.mbed.org/platforms/FRDM-K64F/>`__ 등의 `mBed 디바이스 <https://www.mbed.com/en/>`__를 IBM Internet of Things Foundation Cloud 서비스에 쉽게 연결할 수 있습니다. 라이브러리가 C++을 사용하는 경우에도 mBed 디바이스에 포팅을 어렵게 만드는 특유의 메모리 모델이 종종 있으므로 계속 동적 메모리 할당과 STL 기능의 사용을 피합니다. 어느 경우에서든 라이브러리를 통해 메모리 사용을 가능하면 예측할 수 있도록 할 수 있습니다."

#: ../libraries/mBed_C++.rst:7
msgid "Dependencies"
msgstr ""
"종속 항목"

#: ../libraries/mBed_C++.rst:9
msgid "`Eclipse Paho MQTT library <https://developer.mbed.org/teams/mqtt/code/MQTT/>`__ - Provides a MQTT client library for mBed devices, check `here <http://www.eclipse.org/paho/clients/c/embedded/>`__ for more information."
msgstr ""
"`Eclipse Paho MQTT 라이브러리 <https://developer.mbed.org/teams/mqtt/code/MQTT/>`__ - mBed 디바이스의 MQTT 클라이언트 라이브러리를 제공합니다. 자세한 정보는 `여기 <http://www.eclipse.org/paho/clients/c/embedded/>`__를 확인하십시오."

#: ../libraries/mBed_C++.rst:10
msgid "`EthernetInterface library <https://developer.mbed.org/users/mbed_official/code/EthernetInterface/>`__ - A mBed IP library over Ethernet."
msgstr ""
"`EthernetInterface 라이브러리 <https://developer.mbed.org/users/mbed_official/code/EthernetInterface/>`__ - 이더넷을 통한 mBed IP 라이브러리"

#: ../libraries/mBed_C++.rst:13
msgid "How to use the library"
msgstr ""
"라이브러리 사용 방법"

#: ../libraries/mBed_C++.rst:14
msgid "Use the `mBed Compiler <https://developer.mbed.org/compiler/>`__ to create your applications using this mBed C++ IBMIoTF Client Library. The mBed Compiler provides a lightweight online C/C++ IDE that is pre-configured to let you quickly write programs, compile and download them to run on your mbed Microcontroller. In fact, you don't have to install or set up anything to get running with mbed."
msgstr ""
"`mBed 컴파일러 <https://developer.mbed.org/compiler/>`__를 사용하여 이 mBed C++ IBMIoTF 클라이언트 라이브러리를 통해 애플리케이션을 작성하십시오. mBed 컴파일러는 사용자가 프로그램을 신속하게 써서 컴파일하고 다운로드해서 mbed Microcontroller에서 실행하도록 사전에 구성된 경량 온라인 C/C++ IDE를 제공합니다. 실제로 mbed로 실행하는 데 설치하거나 설정해야 할 항목이 없습니다."

#: ../libraries/mBed_C++.rst:17
msgid "Refer to the step by step `mBed C++ Client Library for IBM IoT Foundation Recipe <https://developer.ibm.com/recipes/tutorials/mbed-c-client-library-for-ibm-iot-foundation/>`__ that shows how one can use this library to connect an ARM mBed NXP LPC 1768 microcontroller to IBM Internet of Things Foundation."
msgstr ""
"ARM mBed NXP LPC 1768 Microcontroller를 IBM Internet of Things Foundation에 연결하는 데 이 라이브러리를 사용할 수 있는 방법을 보여주는 단계별 `IBM IoT Foundation 레시피용 mBed C++ 클라이언트 라이브러리 <https://developer.ibm.com/recipes/tutorials/mbed-c-client-library-for-ibm-iot-foundation/>`__의 내용을 참조하십시오."

#: ../libraries/mBed_C++.rst:20
msgid "Constructor"
msgstr ""
"생성자"

#: ../libraries/mBed_C++.rst:22
msgid "The constructor builds the client instance, and accepts the following parameters:"
msgstr ""
"생성자는 클라이언트 인스턴스를 빌드하고 다음 매개변수를 승인합니다."

#: ../libraries/mBed_C++.rst:24
msgid "org - Your organization ID. (This is a required field. In case of quickstart flow, provide org as quickstart.)"
msgstr ""
"org - 조직 ID. (필수 필드입니다.) quickstart 플로우의 경우 org를 quickstart로 제공하십시오."

#: ../libraries/mBed_C++.rst:25
msgid "type - The type of your device. (This is a required field.)"
msgstr ""
"type - 디바이스의 유형. (필수 필드입니다.)"

#: ../libraries/mBed_C++.rst:26
msgid "id - The ID of your device. (This is a required field."
msgstr ""
"id - 디바이스의 ID. (필수 필드입니다.)"

#: ../libraries/mBed_C++.rst:27
msgid "auth-method - Method of authentication (This is an optional field, needed only for registered flow and the only value currently supported is \"token\")."
msgstr ""
"auth-method - 인증 방법(이는 선택적 필드이며 등록된 플로우 및 현재 지원되는 유일한 값이 \"토큰\"인 경우에만 필요함)."

#: ../libraries/mBed_C++.rst:28
msgid "auth-token - API key token (This is an optional field, needed only for registered flow)."
msgstr ""
"auth-token - API 키 토큰(이는 선택적 필드이며 등록된 플로우에만 필요함)."

#: ../libraries/mBed_C++.rst:30
msgid "These arguments create definitions which are used to interact with the Internet of Things Foundation service."
msgstr ""
"이러한 인수는 Internet of Things Foundation 서비스와 상호작용하는 데 사용되는 정의를 작성합니다."

#: ../libraries/mBed_C++.rst:32
msgid "The following code block shows how to create a DeviceClient instance to interact with the Internet of Things Foundation quickstart service."
msgstr ""
"다음 코드 블록은 Internet of Things Foundation quickstart 서비스와 상호작용할 DeviceClient 인스턴스를 작성하는 방법을 보여줍니다."

#: ../libraries/mBed_C++.rst:56
msgid "As shown above, if the device id is not specified, the DeviceClient uses the MAC address of the device as device id and connects to IBM Internet of Things Foundation. The device code can use getDeviceId() method to retrieve the device id from the DeviceClient instance."
msgstr ""
"위에 표시된 대로 디바이스 ID가 지정되지 않은 경우 DeviceClient가 디바이스의 MAC 주소를 디바이스 ID로 사용하고 IBM Internet of Things Foundation에 연결합니다. 디바이스 코드는 getDeviceId() 메소드를 사용하여 DeviceClient 인스턴스에서 디바이스 ID를 검색할 수 있습니다."

#: ../libraries/mBed_C++.rst:58
msgid "The following code block shows how to create a DeviceClient instance to interact with the Internet of Things Foundation Registered organization."
msgstr ""
"다음 코드 블록은 Internet of Things Foundation Registered 조직과 상호작용하는 데 DeviceClient 인스턴스를 작성하는 방법을 보여줍니다."

#: ../libraries/mBed_C++.rst:80
msgid "Connecting to the Internet of Things Foundation"
msgstr ""
"Internet of Things Foundation에 연결"

#: ../libraries/mBed_C++.rst:82
msgid "The device can connect to the Internet of Things Foundation by calling the connect function on the DeviceClient instance."
msgstr ""
"디바이스는 DeviceClient 인스턴스에서 연결 기능을 호출하여 Internet of Things Foundation에 연결할 수 있습니다."

#: ../libraries/mBed_C++.rst:96
msgid "After the successful connection, the device can publish events to IBM Internet of Things Foundation and listen for commands."
msgstr ""
"연결이 완료되면 디바이스가 IBM Internet of Things Foundation에 이벤트를 공개하고 명령을 청취할 수 있습니다."

#: ../libraries/mBed_C++.rst:101
msgid "Publishing events"
msgstr ""
"이벤트 공개"

#: ../libraries/mBed_C++.rst:102
msgid "Events are the mechanism by which devices publish data to the Internet of Things Foundation. The device controls the content of the event and assigns a name for each event it sends."
msgstr ""
"이벤트는 디바이스가 Internet of Things Foundation에 데이터를 공개하는 데 사용하는 메커니즘입니다. 디바이스는 이벤트의 컨텐츠를 제어하고 전송하는 각 이벤트에 대해 이름을 지정합니다. "

#: ../libraries/mBed_C++.rst:104
msgid "When an event is received by the IBM IoT Foundation the credentials of the connection on which the event was received are used to determine from which device the event was sent. With this architecture it is impossible for a device to impersonate another device."
msgstr ""
"IBM IoT Foundation이 이벤트를 수신하면 이벤트가 수신된 연결의 신임 정보를 사용하여 이벤트를 전송한 디바이스를 판별합니다. 이 아키텍처를 사용하면 한 디바이스가 다른 디바이스를 위장할 수 없습니다. "

#: ../libraries/mBed_C++.rst:106
msgid "Events can be published at any of the three `quality of service levels <../messaging/mqtt.html#/>`__ defined by the MQTT protocol.  By default events will be published as qos level 0."
msgstr ""
"이벤트는 MQTT 프로토콜에 의해 정의된 세 가지 `서비스 품질(QoS) 레벨 <../messaging/mqtt.html#/>`__에서 공개될 수 있습니다. 기본적으로 이벤트는 qos 레벨 0으로 공개됩니다. "

#: ../libraries/mBed_C++.rst:109
msgid "Publish event using default quality of service"
msgstr ""
"기본 서비스 품질(QoS)을 사용하여 이벤트 공개"

#: ../libraries/mBed_C++.rst:111
msgid "The below sample shows how to publish various data points of LPC1768 like x,y & z axis, joystick position, current temperature reading and etc.. to IoT Foundation in JSON format."
msgstr ""
"아래 샘플은 x,y & z 축, 조이스틱 위치, 현재 온도 읽기 등과 같이 LPC1768의 여러 데이터 점을 JSON 형식으로 IoT Foundation에 공개하는 방법을 보여줍니다."

#: ../libraries/mBed_C++.rst:129
#: ../libraries/mBed_C++.rst:200
msgid "The complete sample can be found `here <https://developer.mbed.org/teams/IBM_IoT/code/IBMIoTClientLibrarySample/file/e58533b6bc6b/src/Main.cpp>`__."
msgstr ""
"전체 샘플은 `여기 <https://developer.mbed.org/teams/IBM_IoT/code/IBMIoTClientLibrarySample/file/e58533b6bc6b/src/Main.cpp>`__에서 찾을 수 있습니다."

#: ../libraries/mBed_C++.rst:132
msgid "Publish event using user-defined quality of service"
msgstr ""
"사용자 정의 서비스 품질(QoS)을 사용하여 이벤트 공개"

#: ../libraries/mBed_C++.rst:134
msgid "Events can be published at higher MQTT quality of service levels, but these events may take slower than QoS level 0, because of the extra confirmation of receipt. Also quickstart flow allows only Qos of 0."
msgstr ""
"이벤트는 더 높은 MQTT 서비스 품질(QoS) 레벨에서 공개될 수 있지만 이러한 이벤트는 별도의 수신 확인으로 인해 QoS 레벨 0보다 느릴 수 있습니다. 또한 quickstart 플로우는 Qos 0만 허용합니다."

#: ../libraries/mBed_C++.rst:157
msgid "Handling commands"
msgstr ""
"명령 처리"

#: ../libraries/mBed_C++.rst:158
msgid "When the device client connects, it automatically subscribes to any commands for this device. To process specific commands you need to register a command callback method. The messages are returned as an instance of the Command class which has the following properties:"
msgstr ""
"디바이스 클라이언트가 연결되면 이 디바이스에 대한 명령을 자동으로 구독합니다. 특정 명령을 처리하려면 명령 콜백 메소드를 등록해야 합니다. 메시지는 다음과 같은 특성을 가진 명령 클래스의 인스턴스로 리턴됩니다. "

#: ../libraries/mBed_C++.rst:161
msgid "command - name of the command invoked"
msgstr ""
"command - 호출된 명령의 이름"

#: ../libraries/mBed_C++.rst:162
msgid "format - e.g json, xml"
msgstr ""
"format - 예: json, xml"

#: ../libraries/mBed_C++.rst:163
msgid "payload"
msgstr ""
"페이로드"

#: ../libraries/mBed_C++.rst:165
msgid "Following code defines a sample command callback function that processes the LED blink interval command from the application and adds the same to the DeviceClient instance."
msgstr ""
"코드는 애플리케이션에서 LED 깜박임 간격 명령을 처리하고 DeviceClient 인스턴스에 동일하게 추가하는 샘플 명령 콜백 함수를 정의합니다."

#: ../libraries/mBed_C++.rst:202
msgid "The 'client.yield()' function must be called periodically to receive commands."
msgstr ""
"'client.yield()' 함수를 주기적으로 호출하여 명령을 수신해야 합니다."

#: ../libraries/mBed_C++.rst:207
msgid "Disconnect Client"
msgstr ""
"클라이언트 연결 끊기"

#: ../libraries/mBed_C++.rst:209
msgid "To disconnect the client and release the connections, run the following code snippet."
msgstr ""
"클라이언트의 연결을 끊고 연결을 해제하려면 다음 코드 스니펫을 실행하십시오. "

#: ../libraries/mBed_C++.rst:220
msgid "Samples"
msgstr ""
"샘플"

#: ../libraries/mBed_C++.rst:222
msgid "`IBMIoTClientLibrarySample <https://developer.mbed.org/teams/IBM_IoT/code/IBMIoTClientLibrarySample/>`__ - A Sample code that showcases how to use IBMIoTF client library to connect the mbed LPC1768 or FRDM-K64F devices to the IBM Internet of Things Cloud service."
msgstr ""
"`IBMIoTClientLibrarySample <https://developer.mbed.org/teams/IBM_IoT/code/IBMIoTClientLibrarySample/>`__ - mbed LPC1768 또는 FRDM-K64F 디바이스를 IBM Internet of Things Cloud 서비스에 연결하는 데 IBMIoTF 클라이언트 라이브러리를 사용하는 방법을 보여주는 샘플 코드"

