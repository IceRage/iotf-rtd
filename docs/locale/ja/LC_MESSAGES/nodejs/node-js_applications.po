# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, IBM Corporation
# This file is distributed under the same license as the IBM IOT Foundation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IBM IOT Foundation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-12-17 09:49-0600\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../nodejs/node-js_applications.rst:2
msgid "Node.js Client Library - Applications"
msgstr ""
"Node.js クライアント・ライブラリー - アプリケーション"

#: ../nodejs/node-js_applications.rst:4
msgid "The node.js client is used for simplifying the interacting with the Internet of Things Foundation. This client library contains instruction and guidance on using node.js with Internet of Things Foundation to interact with you devices and applications."
msgstr ""
"node.js クライアントを使用すると、Internet of Things Foundation との対話を単純化できます。このクライアント・ライブラリーには、Internet of Things Foundation で node.js を使用してデバイスおよびアプリケーションと対話する方法についての手順やガイダンスを記載しています。"

#: ../nodejs/node-js_applications.rst:6
msgid "This client library is divided into two parts, Devices and Applications. The Devices section contains information on how devices publish events and handle commands using the node.js Internet of Things Foundation module, and the Applications section contains information on how applications can use the nodejs ibmiotf module to interact with devices."
msgstr ""
"このクライアント・ライブラリーは、「デバイス」と「アプリケーション」という 2 つの部分に分かれています。「デバイス」セクションには、デバイスで Internet of Things Foundation モジュール node.js を使用してイベントのパブリッシュとコマンドの処理を行う方法についての情報が含まれ、「アプリケーション」セクションには、アプリケーションで ibmiotf モジュール nodejs を使用してデバイスと対話する方法についての情報が含まれています。"

#: ../nodejs/node-js_applications.rst:8
msgid "*IotfApplication* is the application client for the Internet of Things Foundation service. This section contains information on how applications interact with devices."
msgstr ""
"*IotfApplication* は、Internet of Things Foundation サービスのアプリケーション・クライアントです。このセクションには、アプリケーションでデバイスと対話する方法についての情報が含まれています。"

#: ../nodejs/node-js_applications.rst:11
msgid "Constructor"
msgstr ""
"コンストラクター"

#: ../nodejs/node-js_applications.rst:13
msgid "The constructor builds the application client instance. It accepts an configuration json containing the following : - org - Your organization ID - id - The unique ID of your application within your organization. - auth-key - API key - auth-token - API key token"
msgstr ""
"コンストラクターはアプリケーション・クライアント・インスタンスを作成します。これは、以下を含む構成 json を受け入れます。- org - 組織 ID - id - 組織内のアプリケーションの固有 ID。- auth-key - API キー - auth-token - API キー・トークン"

#: ../nodejs/node-js_applications.rst:19
msgid "If you want to use quickstart, then send only the first two properties."
msgstr ""
"Quickstart を使用する場合は、最初の 2 つのプロパティーのみを送信します。"

#: ../nodejs/node-js_applications.rst:34
msgid "Using a configuration file"
msgstr ""
"構成ファイルの使用"

#: ../nodejs/node-js_applications.rst:36
msgid "Instead of passing the configuration json directly, you can also use a configuration file. Use the following code snippet"
msgstr ""
"構成 json を直接渡す代わりに、構成ファイルを使用することもできます。以下のコード・スニペットを使用します"

#: ../nodejs/node-js_applications.rst:45
msgid "The configuration file must be in the format of"
msgstr ""
"構成ファイルは、以下の形式でなければなりません"

#: ../nodejs/node-js_applications.rst:55
msgid "Connecting to the Internet of Things Foundation"
msgstr ""
"Internet of Things Foundation への接続"

#: ../nodejs/node-js_applications.rst:57
msgid "Connect to the Internet of Things Foundation by calling the *connect* function."
msgstr ""
"*connect* 関数を呼び出して Internet of Things Foundation に接続します。"

#: ../nodejs/node-js_applications.rst:73
msgid "After the successful connection to the IoTF service, the application client sends a *connect* event. So all the logic can be implemented inside this callback function."
msgstr ""
"IoTF サービスへの接続に成功すると、アプリケーション・クライアントは *connect* イベントを送信します。このため、すべてのロジックはこのコールバック関数の内部に実装できます。"

#: ../nodejs/node-js_applications.rst:76
msgid "Subscribing to device events"
msgstr ""
"デバイス・イベントへのサブスクライブ"

#: ../nodejs/node-js_applications.rst:78
msgid "Events are the mechanism by which devices publish data to the Internet of Things Foundation. The device controls the content of the event and assigns a name for each event it sends."
msgstr ""
"イベントとは、デバイスが Internet of Things Foundation にデータをパブリッシュする際に使用するメカニズムです。デバイスはイベントのコンテンツを制御し、送信するイベントごとに名前を割り当てます。"

#: ../nodejs/node-js_applications.rst:80
msgid "When an event is received by the Internet of Things Foundation, the credentials of the connection on which the event was received are used to determine from which device the event was sent. Using this architecture, it is impossible for a device to impersonate another device."
msgstr ""
"Internet of Things Foundation がイベントを受け取ると、イベントが受信された接続の資格情報を使用して、イベントの送信元デバイスが判別されます。このアーキテクチャーによって、デバイスが別のデバイスの名前を使用することが不可能になります。"

#: ../nodejs/node-js_applications.rst:82
msgid "By default, applications will subscribe to all events from all connected devices. Use the type, id, event and msgFormat parameters to control the scope of the subscription. A single client can support multiple subscriptions. The code samples below give examples of how to subscribe to devices dependent on device type, id, event and msgFormat parameters."
msgstr ""
"デフォルトでは、アプリケーションはすべての接続デバイスの全イベントをサブスクライブします。type、id、event、および msgFormat パラメーターを使用して、サブスクリプションのスコープを制御します。単一のクライアントで複数のサブスクリプションをサポートできます。以下のコード・サンプルは、デバイスの type、id、event、および msgFormat パラメーターに基づいてデバイスをサブスクライブする方法の例を示しています。"

#: ../nodejs/node-js_applications.rst:85
msgid "To subscribe to all events from all devices"
msgstr ""
"すべてのデバイスの全イベントをサブスクライブする場合"

#: ../nodejs/node-js_applications.rst:103
msgid "To subscribe to all events from all devices of a specific type"
msgstr ""
"特定のタイプのすべてのデバイスの全イベントをサブスクライブする場合"

#: ../nodejs/node-js_applications.rst:120
msgid "To subscribe to a specific event from all devices"
msgstr ""
"すべてのデバイスの特定のイベントをサブスクライブする場合"

#: ../nodejs/node-js_applications.rst:138
msgid "To subscribe to a specific event from two or more different devices"
msgstr ""
"複数の異なるデバイスの特定のイベントをサブスクライブする場合"

#: ../nodejs/node-js_applications.rst:156
msgid "To subscribe to all events published by a device in json format"
msgstr ""
"json 形式でデバイスがパブリッシュした全イベントをサブスクライブする場合"

#: ../nodejs/node-js_applications.rst:175
msgid "Handling events from devices"
msgstr ""
"デバイスのイベントの処理"

#: ../nodejs/node-js_applications.rst:177
msgid "To process the events received by your subscriptions you need to implement a device event callback method. The ibmiotf application client emits the event *deviceEvent*. This function has the following properties:"
msgstr ""
"サブスクリプションによって受信したイベントを処理するには、デバイス・イベント・コールバック・メソッドを実装する必要があります。ibmiotf アプリケーション・クライアントはイベント *deviceEvent* を発行します。この関数のプロパティーは、以下のとおりです。"

#: ../nodejs/node-js_applications.rst:179
#: ../nodejs/node-js_applications.rst:273
msgid "deviceType"
msgstr ""
"deviceType"

#: ../nodejs/node-js_applications.rst:180
#: ../nodejs/node-js_applications.rst:274
msgid "deviceId"
msgstr ""
"deviceId"

#: ../nodejs/node-js_applications.rst:181
msgid "eventType"
msgstr ""
"eventType"

#: ../nodejs/node-js_applications.rst:182
msgid "format"
msgstr ""
"format"

#: ../nodejs/node-js_applications.rst:183
msgid "payload - Device event payload"
msgstr ""
"payload - デバイスのイベント・ペイロード"

#: ../nodejs/node-js_applications.rst:184
msgid "topic - Original topic"
msgstr ""
"topic - 元のトピック"

#: ../nodejs/node-js_applications.rst:208
msgid "Subscribing to device status"
msgstr ""
"デバイス・ステータスへのサブスクライブ"

#: ../nodejs/node-js_applications.rst:210
msgid "By default, this will subscribe to status updates for all connected devices. Use the type and id parameters to control the scope of the subscription. A single client can support multiple subscriptions."
msgstr ""
"デフォルトで、これはすべての接続デバイスのステータスの更新をサブスクライブします。type および id パラメーターを使用して、サブスクリプションのスコープを制御します。単一のクライアントで複数のサブスクリプションをサポートできます。"

#: ../nodejs/node-js_applications.rst:213
msgid "Subscribe to status updates for all devices"
msgstr ""
"すべてのデバイスのステータス更新をサブスクライブ"

#: ../nodejs/node-js_applications.rst:232
msgid "Subscribe to status updates for all devices of a specific type"
msgstr ""
"特定のタイプのすべてのデバイスのステータス更新をサブスクライブ"

#: ../nodejs/node-js_applications.rst:250
msgid "Subscribe to status updates for two different devices"
msgstr ""
"2 つの異なるデバイスのステータス更新をサブスクライブ"

#: ../nodejs/node-js_applications.rst:269
msgid "Handling status updates from devices"
msgstr ""
"デバイスのステータス更新の処理"

#: ../nodejs/node-js_applications.rst:271
msgid "To process the status updates received by your subscriptions you need to implement an device status callback method. The ibmiotf application client emits the event *deviceStatus*. This function has the following properties:"
msgstr ""
"サブスクリプションによって受信したステータス更新を処理するには、デバイス・ステータス・コールバック・メソッドを実装する必要があります。ibmiotf アプリケーション・クライアントはイベント *deviceStatus* を発行します。この関数のプロパティーは、以下のとおりです。"

#: ../nodejs/node-js_applications.rst:275
msgid "payload - Device status payload"
msgstr ""
"payload - デバイス・ステータスのペイロード"

#: ../nodejs/node-js_applications.rst:276
msgid "topic"
msgstr ""
"topic"

#: ../nodejs/node-js_applications.rst:300
msgid "Publishing events from devices"
msgstr ""
"デバイスのイベントのパブリッシュ"

#: ../nodejs/node-js_applications.rst:302
msgid "Applications can publish events as if they originated from a Device. The function requires:"
msgstr ""
"アプリケーションは、イベントをデバイスから発信されたかのようにパブリッシュできます。この機能には以下が必要です。"

#: ../nodejs/node-js_applications.rst:304
#: ../nodejs/node-js_applications.rst:331
msgid "DeviceType"
msgstr ""
"デバイス・タイプ"

#: ../nodejs/node-js_applications.rst:305
#: ../nodejs/node-js_applications.rst:332
msgid "Device ID"
msgstr ""
"デバイス ID"

#: ../nodejs/node-js_applications.rst:306
msgid "Event Type"
msgstr ""
"イベント・タイプ"

#: ../nodejs/node-js_applications.rst:307
#: ../nodejs/node-js_applications.rst:334
msgid "Format"
msgstr ""
"形式"

#: ../nodejs/node-js_applications.rst:308
#: ../nodejs/node-js_applications.rst:335
msgid "Data"
msgstr ""
"データ"

#: ../nodejs/node-js_applications.rst:327
msgid "Publishing commands to devices"
msgstr ""
"コマンドをデバイスにパブリッシュ"

#: ../nodejs/node-js_applications.rst:329
msgid "Applications can publish commands to connected devices. The function requires:"
msgstr ""
"アプリケーションはコマンドを接続デバイスにパブリッシュできます。この機能には以下が必要です。"

#: ../nodejs/node-js_applications.rst:333
msgid "Command Type"
msgstr ""
"コマンド・タイプ"

#: ../nodejs/node-js_applications.rst:354
msgid "Disconnect Client"
msgstr ""
"クライアントの切断"

#: ../nodejs/node-js_applications.rst:356
msgid "Disconnects the client and releases the connections"
msgstr ""
"クライアントを切断し、接続をリリースします"

#: ../nodejs/node-js_applications.rst:376
msgid "Check Connection Status"
msgstr ""
"接続状況の検査"

#: ../nodejs/node-js_applications.rst:378
msgid "*isConnected* gives the current status of the application client connection"
msgstr ""
"*isConnected* はアプリケーション・クライアントの接続の現在のステータスを示します"

