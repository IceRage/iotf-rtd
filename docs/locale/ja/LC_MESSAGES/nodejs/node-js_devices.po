# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, IBM Corporation
# This file is distributed under the same license as the IBM IOT Foundation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IBM IOT Foundation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-12-17 09:49-0600\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../nodejs/node-js_devices.rst:2
msgid "Node.js Client Library - Devices"
msgstr ""
"Node.js クライアント・ライブラリー - デバイス"

#: ../nodejs/node-js_devices.rst:4
msgid "The node.js client is used for simplifying the interacting with the Internet of Things Foundation. This client library contains instruction and guidance on using the Node.js with the Internet of Things Foundation to interact with your devices and applications."
msgstr ""
"node.js クライアントを使用すると、Internet of Things Foundation との対話を単純化できます。このクライアント・ライブラリーには、Internet of Things Foundation で Node.js を使用してデバイスおよびアプリケーションと対話する方法についての手順やガイダンスを記載しています。"

#: ../nodejs/node-js_devices.rst:6
msgid "The client library is divided into two parts, Devices and Applications. The Devices section contains information on how devices publish events and handle commands using node.js, and the Applications section contains information on how applications can use the node.js Internet of Things Foundation module to interact with devices."
msgstr ""
"このクライアント・ライブラリーは、「デバイス」と「アプリケーション」という 2 つの部分に分かれています。「デバイス」セクションには、デバイスで node.js を使用してイベントのパブリッシュとコマンドの処理を行う方法についての情報が含まれ、「アプリケーション」セクションには、アプリケーションで Internet of Things Foundation モジュール node.js を使用してデバイスと対話する方法についての情報が含まれています。"

#: ../nodejs/node-js_devices.rst:8
msgid "*IotfDevice* is the device client for the Internet of Things Foundation service. You can use this client to connect to the service, publish events from the device and subscribe to commands."
msgstr ""
"*IotfDevice* は、Internet of Things Foundation サービスのデバイス・クライアントです。このクライアントを使用して、サービスに接続したり、デバイスからイベントをパブリッシュしたり、コマンドをサブスクライブしたりできます。"

#: ../nodejs/node-js_devices.rst:11
msgid "Constructor"
msgstr ""
"コンストラクター"

#: ../nodejs/node-js_devices.rst:13
msgid "The constructor builds the device client instance. It accepts a configuration json containing the following definitions:"
msgstr ""
"コンストラクターはデバイス・クライアント・インスタンスを作成します。これは、以下の定義を含む構成 json を受け入れます。"

#: ../nodejs/node-js_devices.rst:15
msgid "org - Your organization ID"
msgstr ""
"org - 組織 ID"

#: ../nodejs/node-js_devices.rst:16
msgid "type - The type of your device"
msgstr ""
"type - デバイスのタイプ"

#: ../nodejs/node-js_devices.rst:17
msgid "id - The ID of your device"
msgstr ""
"id - デバイスの ID"

#: ../nodejs/node-js_devices.rst:18
msgid "auth-method - Method of authentication (the only value currently supported is “token”)"
msgstr ""
"auth-method - 認証方式 (現在サポートされている値は「token」のみ)"

#: ../nodejs/node-js_devices.rst:19
msgid "auth-token - API key token (required if auth-method is “token”)"
msgstr ""
"auth-token - API キー・トークン (auth-method が「token」である場合に必須)"

#: ../nodejs/node-js_devices.rst:21
msgid "If you want to use quickstart, then send only the first three properties."
msgstr ""
"Quickstart を使用する場合は、最初の 3 つのプロパティーのみを送信します。"

#: ../nodejs/node-js_devices.rst:37
msgid "Using a configuration file"
msgstr ""
"構成ファイルの使用"

#: ../nodejs/node-js_devices.rst:39
msgid "Instead of passing the configuration json directly, you can also use a configuration file. Use the following code snippet:"
msgstr ""
"構成 json を直接渡す代わりに、構成ファイルを使用することもできます。以下のコード・スニペットを使用します。"

#: ../nodejs/node-js_devices.rst:48
msgid "The configuration file must be in the format of"
msgstr ""
"構成ファイルは、以下の形式でなければなりません"

#: ../nodejs/node-js_devices.rst:59
msgid "Connecting to the Internet of Things Foundation"
msgstr ""
"Internet of Things Foundation への接続"

#: ../nodejs/node-js_devices.rst:61
msgid "Connect to the Internet of Things Foundation by calling the *connect* function."
msgstr ""
"*connect* 関数を呼び出して Internet of Things Foundation に接続します。"

#: ../nodejs/node-js_devices.rst:76
msgid "After the successful connection to the IoTF service, the device client sends a *connect* event. So all the device logic can be implemented inside this callback function."
msgstr ""
"IoTF サービスへの接続に成功すると、デバイス・クライアントは *connect* イベントを送信します。このため、すべてのデバイス・ロジックはこのコールバック関数の内部に実装できます。"

#: ../nodejs/node-js_devices.rst:79
msgid "Publishing events"
msgstr ""
"イベントのパブリッシング"

#: ../nodejs/node-js_devices.rst:81
msgid "Events are the mechanism by which devices publish data to the Internet of Things Foundation. The device controls the content of the event and assigns a name for each event it sends."
msgstr ""
"イベントとは、デバイスが Internet of Things Foundation にデータをパブリッシュする際に使用するメカニズムです。デバイスはイベントのコンテンツを制御し、送信するイベントごとに名前を割り当てます。"

#: ../nodejs/node-js_devices.rst:83
msgid "When an event is received by the IOT Foundation the credentials of the connection on which the event was received are used to determine from which device the event was sent. With this architecture it is impossible for a device to impersonate another device."
msgstr ""
"IOT Foundation がイベントを受け取ると、イベントが受信された接続の資格情報を使用して、イベントの送信元デバイスが判別されます。このアーキテクチャーにより、デバイスは別のデバイスの偽名を使用することが不可能になります。"

#: ../nodejs/node-js_devices.rst:85
msgid "Events can be published at any of the three quality of service levels defined by the MQTT protocol. By default events will be published as QoS level 0. Please not that if you are using the Internet of Things Quickstart service, events can only be published at QoS level 0."
msgstr ""
"イベントは、MQTT プロトコルによって定義された 3 つのサービス品質レベルのいずれでもパブリッシュできます。デフォルトでは、イベントは QoS レベル 0 としてパブリッシュされます。Internet of Things Quickstart サービスを使用している場合、イベントは QoS レベル 0 でのみパブリッシュできることに注意してください。"

#: ../nodejs/node-js_devices.rst:87
msgid "Events can be published by using: -   eventType - Type of event to be published e.g status, gps. -   eventFormat - Format of the event e.g json. -   data - Payload of the event. -   QoS - MQTT quality of service for the publish event. Supported values : 0,1,2."
msgstr ""
"イベントは、以下を使用してパブリッシュできます。-   eventType - パブリッシュするイベントのタイプ。例: status、gps。-   eventFormat - イベントの形式。例: json。-   data - イベントのペイロード。-   QoS - パブリッシュ・イベントの MQTT サービス品質。サポートされる値: 0、1、2。"

#: ../nodejs/node-js_devices.rst:110
msgid "Handling commands"
msgstr ""
"コマンドの処理"

#: ../nodejs/node-js_devices.rst:112
msgid "When the device client connects, it automatically subscribes to any command for this device. To process specific commands you need to register a command callback function. The device client sends *command* when a command is received. The callback function has the following properties."
msgstr ""
"デバイス・クライアントは、接続時に自動的にこのデバイスのコマンドをサブスクライブします。特定のコマンドを処理するには、コマンド・コールバック関数を登録する必要があります。デバイス・クライアントは、コマンドを受け取ると *command* を送信します。コールバック関数のプロパティーは以下のとおりです。"

#: ../nodejs/node-js_devices.rst:114
msgid "commandName - name of the command invoked"
msgstr ""
"commandName - 呼び出されるコマンドの名前"

#: ../nodejs/node-js_devices.rst:115
msgid "format - e.g json, xml"
msgstr ""
"format - 例: json、xml"

#: ../nodejs/node-js_devices.rst:116
msgid "payload - payload for the command"
msgstr ""
"payload - コマンドのペイロード"

#: ../nodejs/node-js_devices.rst:117
msgid "topic - actual topic where the command was received"
msgstr ""
"topic - コマンドを受け取った実際のトピック"

#: ../nodejs/node-js_devices.rst:143
msgid "Disconnect Client"
msgstr ""
"クライアントの切断"

#: ../nodejs/node-js_devices.rst:145
msgid "Disconnects the client and releases the connections"
msgstr ""
"クライアントを切断し、接続をリリースします"

#: ../nodejs/node-js_devices.rst:167
msgid "Check Connection Status"
msgstr ""
"接続状況の検査"

#: ../nodejs/node-js_devices.rst:169
msgid "*isConnected* gives the current status of the client connection"
msgstr ""
"*isConnected* はクライアント接続の現在のステータスを示します"

