# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, IBM Corporation
# This file is distributed under the same license as the IBM IOT Foundation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IBM IOT Foundation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-04-19 20:40-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../docs/devices/libraries/java_deviceManagement.rst:3
msgid "Java Client Library - Managed Devices"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:6
msgid "Introduction"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:8
msgid "This client library describes how to use devices with the Java ibmiotf client library. For help with getting started with this module, see `Java Client Library - Introduction <../java/javaintro.html>`__."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:10
msgid "This section contains information on how devices can  to the IoT Platform Device Management service using Java and perform device management operations like firmware update, location update, and diagnostics update."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:12
msgid "The Device section contains information on how devices can publish events and handle commands using the Java ibmiotf Client Library."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:14
msgid "The Applications section contains information on how applications can use the Java ibmiotf Client Library to interact with devices."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:18
msgid "Device Management"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:19
msgid "The `device management <../reference/device_mgmt.html>`__ feature enhances the IoT Platform service with new capabilities for managing devices. Device management makes a distinction between managed and unmanaged devices:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:21
msgid "**Managed Devices** are defined as devices which have a management agent installed. The management agent sends and receives device metadata and responds to device management commands from the IoT Platform."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:22
msgid "**Unmanaged Devices** are any devices which do not have a device management agent. All devices begin their lifecycle as unmanaged devices, and can transition to managed devices by sending a message from a device management agent to the IoT Platform."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:27
msgid "Connecting to the IoT Platform Device Management Service"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:30
msgid "Create DeviceData"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:31
msgid "The `device model <../reference/device_model.html>`__ describes the metadata and management characteristics of a device. The device database in the IoT Platform is the master source of device information. Applications and managed devices are able to send updates to the database such as a location or the progress of a firmware update. Once these updates are received by the IoT Platform, the device database is updated, making the information available to applications."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:33
msgid "The device model in the ibmiotf client library is represented as DeviceData and to create a DeviceData one needs to create the following objects,"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:35
msgid "DeviceInfo (mandatory)"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:36
msgid "DeviceLocation (required if the device supports location update)"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:37
msgid "DiagnosticErrorCode (required if the device wants to update the ErrorCode)"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:38
msgid "DiagnosticLog (required if the device wants to update Log information)"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:39
msgid "DeviceFirmware (required if the device supports Firmware Actions)"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:40
msgid "DeviceMetadata (optional)"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:42
msgid "The following code snippet shows how to create the mandatory object DeviceInfo along with an optional object DeviceMetadata with sample data:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:64
msgid "The following code snippet shows how to create the DeviceData object with the above created DeviceInfo and DeviceMetadata objects:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:73
msgid "Construct ManagedDevice"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:74
msgid "ManagedDevice - A device class that connects the device as managed device to IoT Platform and enables the device to perform one or more Device Management operations. Also the ManagedDevice instance can be used to do normal device operations like publishing device events and listening for commands from application."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:76
msgid "ManagedDevice exposes 2 different constructors to support different user patterns,"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:78
msgid "**Constructor One**"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:80
msgid "Constructs a ManagedDevice instance by accepting the DeviceData and the following properties,"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:82
msgid "Organization-ID - Your organization ID."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:83
msgid "Device-Type - The type of your device."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:84
msgid "Device-ID - The ID of your device."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:85
msgid "Authentication-Method - Method of authentication (The only value currently supported is \"token\")."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:86
msgid "Authentication-Token - API key token"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:88
msgid "All these properties are required to interact with the IoT Platform."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:90
msgid "The following code shows how to create a ManagedDevice instance:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:103
msgid "The existing users of DeviceClient might observe that the names of these properties have changed slightly. These names have been changed to mirror the names in the IoT Platform Dashboard, but the existing users who want to migrate from the DeviceClient to the ManagedDevice can still use the old format and construct the ManagedDevice instance as follows:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:115
msgid "**Constructor Two**"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:117
msgid "Construct a ManagedDevice instance by accepting the DeviceData and the MqttClient instance. This constructor requires the DeviceData to be created with additional device attributes like Device Type and Device Id as follows:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:135
msgid "Note this constructor helps the custom device users to create a ManagedDevice instance with the already created and connected MqttClient instance to take advantage of device management operations. But we recommend the users to use the library for all the device functionalities."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:138
msgid "Manage"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:139
msgid "The device can invoke manage() method to participate in device management activities. The manage request will initiate a connect request internally if the device is not connected to the IoT Platform already:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:145
msgid "The device can use overloaded manage (lifetime) method to register the device for a given timeframe. The timeframe specifies the length of time within which the device must send another **Manage device** request in order to avoid being reverted to an unmanaged device and marked as dormant."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:151
msgid "Refer to the `documentation <../device_mgmt/operations/manage.html>`__ for more information about the manage operation."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:154
msgid "Unmanage"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:156
msgid "A device can invoke unmanage() method when it no longer needs to be managed. The IoT Platform will no longer send new device management requests to this device and all device management requests from this device will be rejected other than a **Manage device** request."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:162
msgid "Refer to the `documentation <../device_mgmt/operations/manage.html>`__ for more information about the Unmanage operation."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:165
msgid "Location Update"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:167
msgid "Devices that can determine their location can choose to notify the IoT Platform about location changes. In order to update the location, the device needs to create DeviceData instance with the DeviceLocation object first."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:182
msgid "Once the device is connected to IoT Platform, the location can be updated by invoking the following method:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:193
msgid "Later, any new location can be updated by changing the properties of the DeviceLocation object:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:204
msgid "The update() method informs the IoT Platform about the new location."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:206
msgid "Refer to the `documentation <../device_mgmt/operations/update.html>`__ for more information about the Location update."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:209
msgid "Append/Clear ErrorCodes"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:211
msgid "Devices can choose to notify the IoT Platform about changes in their error status. In order to send the ErrorCodes the device needs to construct a DiagnosticErrorCode object as follows:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:223
msgid "Once the device is connected to IoT Platform, the ErrorCode can be sent by calling the send() method as follows:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:229
msgid "Later, any new ErrorCodes can be easily added to the IoT Platform by calling the append method as follows:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:240
msgid "Also, the ErrorCodes can be cleared from IoT Platform by calling the clear() method as follows:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:252
msgid "Append/Clear Log messages"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:253
msgid "Devices can choose to notify the IoT Platform about changes by adding a new log entry. Log entry includes a log messages, its timestamp and severity, as well as an optional base64-encoded binary diagnostic data. In order to send log messages, the device needs to construct a DiagnosticLog object as follows:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:268
msgid "Once the device is connected to IoT Platform, the log message can be sent by calling the send() method as follows:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:274
msgid "Later, any new log messages can be easily added to the IoT Platform by calling the append method as follows:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:286
msgid "Also, the log messages can be cleared from IoT Platform by calling the clear method as follows:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:297
msgid "The device diagnostics operations are intended to provide information on device errors, and does not provide diagnostic information relating to the devices connection to the IoT Platform."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:299
msgid "Refer to the `documentation <../device_mgmt/operations/diagnostics.html>`__ for more information about the Diagnostics operation."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:302
msgid "Firmware Actions"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:303
msgid "The firmware update process is separated into two distinct actions:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:305
msgid "Downloading Firmware"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:306
msgid "Updating Firmware."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:308
msgid "The device needs to do the following activities to support Firmware Actions:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:310
msgid "**1. Construct DeviceFirmware Object**"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:312
msgid "In order to perform Firmware actions the device needs to construct the DeviceFirmware object and add it to DeviceData as follows:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:334
msgid "The DeviceFirmware object represents the current firmware of the device and will be used to report the status of the Firmware Download and Firmware Update actions to IoT Platform."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:336
msgid "**2. Inform the server about the Firmware action support**"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:338
msgid "The device needs to set the firmware action flag to true in order for the server to initiate the firmware request. This can be achieved by invoking a following method with a boolean value:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:345
msgid "As the manage request informs the IoT Platform about the firmware action support, manage() method needs to be called right after setting the firmware action support."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:347
msgid "**3. Create the Firmware Action Handler**"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:349
msgid "In order to support the Firmware action, the device needs to create a handler and add it to ManagedDevice. The handler must extend a DeviceFirmwareHandler class and implement the following methods:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:356
msgid "**3.1 Sample implementation of downloadFirmware**"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:358
msgid "The implementation must add logic to download the firmware and report the status of the download via DeviceFirmware object. If the Firmware Download operation is successful, then the state of the firmware to be set to DOWNLOADED and UpdateStatus should be set to SUCCESS."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:360
msgid "If an error occurs during Firmware Download the state should be set to IDLE and updateStatus should be set to one of the error status values:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:362
#: ../docs/devices/libraries/java_deviceManagement.rst:460
msgid "OUT_OF_MEMORY"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:363
msgid "CONNECTION_LOST"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:364
msgid "INVALID_URI"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:366
msgid "A sample Firmware Download implementation for a Raspberry Pi device is shown below:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:425
msgid "Device can check the integrity of the downloaded firmware image using the verifier and report the status back to IoT Platform. The verifier can be set by the device during the startup (while creating the DeviceFirmware Object) or as part of the Download Firmware request by the application. A sample code to verify the same is below:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:452
#: ../docs/devices/libraries/java_deviceManagement.rst:496
msgid "The complete code can be found in the device management sample `RasPiFirmwareHandlerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/RasPiFirmwareHandlerSample.java>`__."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:454
msgid "**3.2 Sample implementation of updateFirmware**"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:456
msgid "The implementation must add logic to install the downloaded firmware and report the status of the update via DeviceFirmware object. If the Firmware Update operation is successful, then the state of the firmware should to be set to IDLE and UpdateStatus should be set to SUCCESS."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:458
msgid "If an error occurs during Firmware Update, updateStatus should be set to one of the error status values:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:461
msgid "UNSUPPORTED_IMAGE"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:463
msgid "A sample Firmware Update implementation for a Raspberry Pi device is shown below:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:498
msgid "**4. Add the handler to ManagedDevice**"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:500
msgid "The created handler needs to be added to the ManagedDevice instance so that the ibmiotf client library invokes the corresponding method when there is a Firmware action request from IoT Platform."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:507
msgid "Refer to `this page <../device_mgmt/operations/firmware_actions.html>`__ for more information about the Firmware action."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:510
msgid "Device Actions"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:511
msgid "The IoT Platform supports the following device actions:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:513
msgid "Reboot"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:514
msgid "Factory Reset"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:516
msgid "The device needs to do the following activities to support Device Actions:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:518
msgid "**1. Inform server about the Device Actions support**"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:520
msgid "In order to perform Reboot and Factory Reset, the device needs to inform the IoT Platform about its support first. This can achieved by invoking a following method with a boolean value:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:527
msgid "As the manage request informs the IoT Platform about the device action support, manage() method needs to be called right after setting the device action support."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:529
msgid "**2. Create the Device Action Handler**"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:531
msgid "In order to support the device action, the device needs to create a handler and add it to ManagedDevice. The handler must extend a DeviceActionHandler class and provide implementation for the following methods:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:538
msgid "**2.1 Sample implementation of handleReboot**"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:540
msgid "The implementation must add a logic to reboot the device and report the status of the reboot via DeviceAction object. The device needs to update the status along with a optional message only when there is a failure (because the successful operation reboots the device and the device code will not have a control to update the IoT Platform). A sample reboot implementation for a Raspberry Pi device is shown below:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:563
msgid "The complete code can be found in the device management sample `DeviceActionHandlerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/DeviceActionHandlerSample.java>`__."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:565
msgid "**2.2 Sample implementation of handleFactoryReset**"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:567
msgid "The implementation must add a logic to reset the device to factory settings and report the status via DeviceAction object. The device needs to update the status along with a optional message only when there is a failure (because as part of this process, the device reboots and the device will not have a control to update status to IoT Platform). The skeleton of the Factory Reset implementation is shown below:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:582
msgid "**3. Add the handler to ManagedDevice**"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:584
msgid "The created handler needs to be added to the ManagedDevice instance so that the ibmiotf client library invokes the corresponding method when there is a device action request from IoT Platform."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:591
msgid "Refer to `this page <../device_mgmt/operations/device_actions.html>`__ for more information about the Device Action."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:594
msgid "Listen for Device attribute changes"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:596
msgid "This ibmiotf client library updates the corresponding objects whenever there is an update request from the IoT Platform, these update requests are initiated by the application either directly or indirectly (Firmware Update) via the IoT Platform ReST API. Apart from updating these attributes, the library provides a mechanism where the device can be notified whenever a device attribute is updated."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:598
msgid "Attributes that can be updated by this operation are location, metadata, device information and firmware."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:600
msgid "In order to get notified, the device needs to add a property change listener on those objects that it is interested."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:609
msgid "Also, the device needs to implement the propertyChange() method where it receives the notification. A sample implementation is as follows:"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:642
msgid "Refer to `this page <../device_mgmt/operations/update.html>`__ for more information about updating the device attributes."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:645
msgid "Examples"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:646
msgid "`SampleRasPiDMAgent <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/SampleRasPiDMAgent.java>`__ - A sample agent code that shows how to perform various device management operations on Raspberry Pi."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:647
msgid "`SampleRasPiManagedDevice <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/SampleRasPiManagedDevice.java>`__ - A sample code that shows how one can perform both device operations and management operations."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:648
msgid "`SampleRasPiDMAgentWithCustomMqttAsyncClient <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/SampleRasPiDMAgentWithCustomMqttAsyncClient.java>`__ - A sample agent code with custom MqttAsyncClient."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:649
msgid "`SampleRasPiDMAgentWithCustomMqttClient <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/SampleRasPiDMAgentWithCustomMqttClient.java>`__ - A sample agent code with custom MqttClient."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:650
msgid "`RasPiFirmwareHandlerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/RasPiFirmwareHandlerSample.java>`__ - A sample implementation of FirmwareHandler for Raspberry Pi."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:651
msgid "`DeviceActionHandlerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/DeviceActionHandlerSample.java>`__ - A sample implementation of DeviceActionHandler"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:652
msgid "`ManagedDeviceWithLifetimeSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/ManagedDeviceWithLifetimeSample.java>`__ - A sample that shows how to send regular manage request with lifetime specified."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:653
msgid "`DeviceAttributesUpdateListenerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/DeviceAttributesUpdateListenerSample.java>`__ - A sample listener code that shows how to listen for a various device attribute changes ."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:654
msgid "`NonBlockingDiagnosticsErrorCodeUpdateSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/NonBlockingDiagnosticsErrorCodeUpdateSample.java>`__ - A sample that shows how to add ErrorCode without waiting for response from the server."
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:657
msgid "Recipe"
msgstr ""

#: ../docs/devices/libraries/java_deviceManagement.rst:659
msgid "Refer to `the recipe <https://developer.ibm.com/recipes/tutorials/connect-raspberry-pi-as-managed-device-to-ibm-iot-foundation/>`__ that shows how to connect the Raspberry Pi device as managed device to IoT Platform to perform various device management operations in step by step using this client library."
msgstr ""

