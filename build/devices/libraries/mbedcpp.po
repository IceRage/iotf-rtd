# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, IBM Corporation
# This file is distributed under the same license as the IBM IOT Foundation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IBM IOT Foundation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-04-19 20:40-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../docs/devices/libraries/mbedcpp.rst:2
msgid "mBed C++ for Device Developers"
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:4
msgid "See `ibmiotf <https://developer.mbed.org/teams/IBM_IoT/code/IBMIoTF/>`_ on `developer.mbed.org <https://developer.mbed.org/>`_"
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:6
msgid "The `mBed C++ client library <https://developer.mbed.org/teams/IBM_IoT/code/IBMIoTF/>`_ can be used to connect `mBed devices <https://www.mbed.com/en/>`__ like `LPC1768 <https://developer.mbed.org/platforms/mbed-LPC1768/>`__, `FRDM-K64F <https://developer.mbed.org/platforms/FRDM-K64F/>`__ and etc.. to the IoT Platform Cloud service with ease. Although the library uses C++, it still avoids dynamic memory allocations and use of STL functions as the mBed devices sometimes have idiosyncratic memory models which make porting difficult. In any case, the library allows one to make memory use as predictable as possible."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:9
msgid "Dependencies"
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:11
msgid "`Eclipse Paho MQTT library <https://developer.mbed.org/teams/mqtt/code/MQTT/>`__ - Provides a MQTT client library for mBed devices, check `here <http://www.eclipse.org/paho/clients/c/embedded/>`__ for more information."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:12
msgid "`EthernetInterface library <https://developer.mbed.org/users/mbed_official/code/EthernetInterface/>`__ - A mBed IP library over Ethernet."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:15
msgid "How to use the library"
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:16
msgid "Use the `mBed Compiler <https://developer.mbed.org/compiler/>`__ to create your applications using this mBed C++ IBMIoTF Client Library. The mBed Compiler provides a lightweight online C/C++ IDE that is pre-configured to let you quickly write programs, compile and download them to run on your mbed Microcontroller. In fact, you don't have to install or set up anything to get running with mbed."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:19
msgid "Refer to the step by step `mBed C++ Client Library for IBM IoT Platform Recipe <https://developer.ibm.com/recipes/tutorials/mbed-c-client-library-for-ibm-iot-foundation/>`__ that shows how one can use this library to connect an ARM mBed NXP LPC 1768 microcontroller to the IoT Platform."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:22
msgid "Constructor"
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:24
msgid "The constructor builds the client instance, and accepts the following parameters:"
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:26
msgid "org - Your organization ID. (This is a required field. In case of quickstart flow, provide org as quickstart.)"
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:27
msgid "type - The type of your device. (This is a required field.)"
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:28
msgid "id - The ID of your device. (This is a required field."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:29
msgid "auth-method - Method of authentication (This is an optional field, needed only for registered flow and the only value currently supported is \"token\")."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:30
msgid "auth-token - API key token (This is an optional field, needed only for registered flow)."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:32
msgid "These arguments create definitions which are used to interact with the IoT Platform service."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:34
msgid "The following code block shows how to create a DeviceClient instance to interact with the IoT Platform quickstart service."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:58
msgid "As shown above, if the device id is not specified, the DeviceClient uses the MAC address of the device as device id and connects to the IoT Platform. The device code can use getDeviceId() method to retrieve the device id from the DeviceClient instance."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:60
msgid "The following code block shows how to create a DeviceClient instance to interact with the IoT Platform Registered organization."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:82
msgid "Connecting to the IoT Platform"
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:84
msgid "The device can connect to the IoT Platform by calling the connect function on the DeviceClient instance."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:98
msgid "After the successful connection, the device can publish events to the IoT Platform and listen for commands."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:100
msgid "Also, the device can query the status of the connection using the isConnected() method as follows,"
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:114
msgid "Publishing events"
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:115
msgid "Events are the mechanism by which devices publish data to the IoT Platform. The device controls the content of the event and assigns a name for each event it sends."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:117
msgid "When an event is received by the IBM IoT Platform the credentials of the connection on which the event was received are used to determine from which device the event was sent. With this architecture it is impossible for a device to impersonate another device."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:119
msgid "Events can be published at any of the three `quality of service levels <../messaging/mqtt.html#/>`__ defined by the MQTT protocol.  By default events will be published as qos level 0."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:122
msgid "Publish event using default quality of service"
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:124
msgid "The below sample shows how to publish various data points of LPC1768 like x,y & z axis, joystick position, current temperature reading and etc.. to IoT Platform in JSON format."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:142
#: ../docs/devices/libraries/mbedcpp.rst:238
msgid "The complete sample can be found `here <https://developer.mbed.org/teams/IBM_IoT/code/IBMIoTClientLibrarySample/file/e58533b6bc6b/src/Main.cpp>`__."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:145
msgid "Publish event using user-defined quality of service"
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:147
msgid "Events can be published at higher MQTT quality of service levels, but these events may take slower than QoS level 0, because of the extra confirmation of receipt. Also quickstart flow allows only Qos of 0."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:169
msgid "Handling the connection lost error during the event publish"
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:171
msgid "When the publishEvent() method returns false, one can check the status of the connection and call reConnect() if the connection is lost,"
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:189
msgid "The library does not store the events published during the unconnected state, and hence, the device needs to call the publishEvent() method again to send those events once the connection is reestablished."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:195
msgid "Handling commands"
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:196
msgid "When the device client connects, it automatically subscribes to any commands for this device. To process specific commands you need to register a command callback method. The messages are returned as an instance of the Command class which has the following properties:"
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:199
msgid "command - name of the command invoked"
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:200
msgid "format - e.g json, xml"
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:201
msgid "payload"
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:203
msgid "Following code defines a sample command callback function that processes the LED blink interval command from the application and adds the same to the DeviceClient instance."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:240
msgid "The 'client.yield()' function must be called periodically to receive commands."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:245
msgid "Disconnect Client"
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:247
msgid "To disconnect the client and release the connections, run the following code snippet."
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:258
msgid "Samples"
msgstr ""

#: ../docs/devices/libraries/mbedcpp.rst:260
msgid "`IBMIoTClientLibrarySample <https://developer.mbed.org/teams/IBM_IoT/code/IBMIoTClientLibrarySample/>`__ - A Sample code that showcases how to use IBMIoTF client library to connect the mbed LPC1768 or FRDM-K64F devices to the IBM Internet of Things Cloud service."
msgstr ""

