# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, IBM Corporation
# This file is distributed under the same license as the IBM IOT Foundation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IBM IOT Foundation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-04-19 20:40-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../docs/applications/libraries/java.rst:2
msgid "Java for Application Developers"
msgstr ""

#: ../docs/applications/libraries/java.rst:4
msgid "See `iot-java <https://github.com/ibm-messaging/iot-java>`_ in GitHub"
msgstr ""

#: ../docs/applications/libraries/java.rst:7
msgid "Constructor"
msgstr ""

#: ../docs/applications/libraries/java.rst:9
msgid "The constructor builds the client instance, and accepts a Properties object containing the following definitions:"
msgstr ""

#: ../docs/applications/libraries/java.rst:11
msgid "``org`` - Your organization ID (This is a required field. In case of quickstart flow, provide org as ``quickstart``)."
msgstr ""

#: ../docs/applications/libraries/java.rst:12
msgid "``id`` - The unique ID of your application within your organization."
msgstr ""

#: ../docs/applications/libraries/java.rst:13
msgid "``auth-method`` - Method of authentication (the only value currently supported is ``apikey``)."
msgstr ""

#: ../docs/applications/libraries/java.rst:14
msgid "``auth-key`` - API key (required if auth-method is ``apikey``)."
msgstr ""

#: ../docs/applications/libraries/java.rst:15
msgid "``auth-token`` - API key token (required if auth-method is ``apikey``)."
msgstr ""

#: ../docs/applications/libraries/java.rst:16
msgid "``clean-session`` - true or false (required only if you want to connect the application in durable subscription. By default the clean-session is set to true)."
msgstr ""

#: ../docs/applications/libraries/java.rst:17
msgid "``shared-subscription`` - true or false (required only if shared subscription needs to be enabled)."
msgstr ""

#: ../docs/applications/libraries/java.rst:19
msgid "One must set ``shared-subscription`` to true to build scalable applications which will load balance messages across multiple instances of the application. Refer to the `scalable applications section <https://docs.internetofthings.ibmcloud.com/applications/mqtt.html#/scalable-applications#scalable-applications>`__ for more information about the load balancing."
msgstr ""

#: ../docs/applications/libraries/java.rst:21
msgid "The Properties object creates definitions which are used to interact with the IoT Platform module. If no options are provided or organization is provided as quickstart, the client will connect to the IoT Platform Quickstart, and default to an unregistered device."
msgstr ""

#: ../docs/applications/libraries/java.rst:23
msgid "The following code snippet shows how to construct the ApplicationClient instance in Quickstart mode,"
msgstr ""

#: ../docs/applications/libraries/java.rst:36
msgid "The following code snippet shows how to construct the ApplicationClient instance in registered flow,"
msgstr ""

#: ../docs/applications/libraries/java.rst:50
msgid "Using a configuration file"
msgstr ""

#: ../docs/applications/libraries/java.rst:52
msgid "Instead of including a Properties object directly, you can use a configuration file containing the name-value pairs for Properties. If you are using a configuration file containing a Properties object, use the following code format."
msgstr ""

#: ../docs/applications/libraries/java.rst:60
msgid "The application configuration file must be in the following format:"
msgstr ""

#: ../docs/applications/libraries/java.rst:77
msgid "Connecting to the IoT Platform"
msgstr ""

#: ../docs/applications/libraries/java.rst:79
msgid "Connect to the IoT Platform by calling the *connect* function."
msgstr ""

#: ../docs/applications/libraries/java.rst:89
msgid "After the successful connection to the IoT Platform service, the application client can perform the following operations, like subscribing to device events, subscribing to device status, publishing device events and commands."
msgstr ""

#: ../docs/applications/libraries/java.rst:96
msgid "Subscribing to device events"
msgstr ""

#: ../docs/applications/libraries/java.rst:97
msgid "Events are the mechanism by which devices publish data to the IoT Platform. The device controls the content of the event and assigns a name for each event it sends."
msgstr ""

#: ../docs/applications/libraries/java.rst:99
msgid "When an event is received by the IoT Platform the credentials of the connection on which the event was received are used to determine from which device the event was sent. With this architecture it is impossible for a device to impersonate another device."
msgstr ""

#: ../docs/applications/libraries/java.rst:101
msgid "By default, applications will subscribe to all events from all connected devices. Use the type, id, event and msgFormat parameters to control the scope of the subscription. A single client can support multiple subscriptions. The code samples below give examples of how to subscribe to devices dependent on device type, id, event and msgFormat parameters."
msgstr ""

#: ../docs/applications/libraries/java.rst:104
msgid "To subscribe to all events from all devices"
msgstr ""

#: ../docs/applications/libraries/java.rst:112
msgid "To subscribe to all events from all devices of a specific type"
msgstr ""

#: ../docs/applications/libraries/java.rst:120
msgid "To subscribe to all events from a specific device"
msgstr ""

#: ../docs/applications/libraries/java.rst:128
msgid "To subscribe to a specific event from two or more different devices"
msgstr ""

#: ../docs/applications/libraries/java.rst:137
msgid "To subscribe to events published by a device in json format"
msgstr ""

#: ../docs/applications/libraries/java.rst:149
msgid "Handling events from devices"
msgstr ""

#: ../docs/applications/libraries/java.rst:150
msgid "To process the events received by your subscriptions you need to register an event callback method. The messages are returned as an instance of the Event class which has the following properties:"
msgstr ""

#: ../docs/applications/libraries/java.rst:152
msgid "event.device - string (uniquely identifies the device across all types of devices in the organization)"
msgstr ""

#: ../docs/applications/libraries/java.rst:153
msgid "event.deviceType - string"
msgstr ""

#: ../docs/applications/libraries/java.rst:154
msgid "event.deviceId - string"
msgstr ""

#: ../docs/applications/libraries/java.rst:155
msgid "event.event - string"
msgstr ""

#: ../docs/applications/libraries/java.rst:156
msgid "event.format - string"
msgstr ""

#: ../docs/applications/libraries/java.rst:157
msgid "event.data - dict"
msgstr ""

#: ../docs/applications/libraries/java.rst:158
msgid "event.timestamp - datetime"
msgstr ""

#: ../docs/applications/libraries/java.rst:160
msgid "A sample implementation of the Event callback,"
msgstr ""

#: ../docs/applications/libraries/java.rst:178
msgid "Once the event callback is added to the ApplicationClient, the processEvent() method is invoked whenever any event is published on the subscribed criteria, The following snippet shows how to add the Event call back into ApplicationClient instance,"
msgstr ""

#: ../docs/applications/libraries/java.rst:186
msgid "Similar to subscribing to device events, the application can subscribe to commands that are sent to the devices. Following code snippet shows how to subscribe to all commands to all the devices in the organization:"
msgstr ""

#: ../docs/applications/libraries/java.rst:194
msgid "Overloaded methods are available to control the command subscription. The processCommand() method is called when a command is sent to the device that matches the command subscription."
msgstr ""

#: ../docs/applications/libraries/java.rst:201
msgid "Subscribing to device status"
msgstr ""

#: ../docs/applications/libraries/java.rst:202
msgid "Similar to subscribing to device events, applications can subscribe to device status, like device connect and disconnect to IoT Platform. By default, this will subscribe to status updates for all connected devices. Use the Device Type and Device Id parameters to control the scope of the subscription. A single ApplicationClient can support multiple subscriptions."
msgstr ""

#: ../docs/applications/libraries/java.rst:205
msgid "Subscribe to status updates for all devices"
msgstr ""

#: ../docs/applications/libraries/java.rst:214
msgid "Subscribe to status updates for all devices of a specific type"
msgstr ""

#: ../docs/applications/libraries/java.rst:223
msgid "Subscribe to status updates for two different devices"
msgstr ""

#: ../docs/applications/libraries/java.rst:236
msgid "Handling status updates from devices"
msgstr ""

#: ../docs/applications/libraries/java.rst:237
msgid "To process the status updates received by your subscriptions you need to register an status event callback method. The messages are returned as an instance of the Status class which contains the below mentioned properties:"
msgstr ""

#: ../docs/applications/libraries/java.rst:239
msgid "The following properties are set for both \"Connect\" and \"Disconnect\" status events:"
msgstr ""

#: ../docs/applications/libraries/java.rst:241
msgid "status.clientAddr - string"
msgstr ""

#: ../docs/applications/libraries/java.rst:242
msgid "status.protocol - string"
msgstr ""

#: ../docs/applications/libraries/java.rst:243
msgid "status.clientId - string"
msgstr ""

#: ../docs/applications/libraries/java.rst:244
msgid "status.user - string"
msgstr ""

#: ../docs/applications/libraries/java.rst:245
msgid "status.time - java.util.Date"
msgstr ""

#: ../docs/applications/libraries/java.rst:246
msgid "status.action - string"
msgstr ""

#: ../docs/applications/libraries/java.rst:247
msgid "status.connectTime - java.util.Date"
msgstr ""

#: ../docs/applications/libraries/java.rst:248
msgid "status.port - integer"
msgstr ""

#: ../docs/applications/libraries/java.rst:250
msgid "The following properties are only set when the action is \"Disconnect\":"
msgstr ""

#: ../docs/applications/libraries/java.rst:252
msgid "status.writeMsg - integer"
msgstr ""

#: ../docs/applications/libraries/java.rst:253
msgid "status.readMsg - integer"
msgstr ""

#: ../docs/applications/libraries/java.rst:254
msgid "status.reason - string"
msgstr ""

#: ../docs/applications/libraries/java.rst:255
msgid "status.readBytes - integer"
msgstr ""

#: ../docs/applications/libraries/java.rst:256
msgid "status.writeBytes - integer"
msgstr ""

#: ../docs/applications/libraries/java.rst:258
msgid "A sample implementation of the Status callback,"
msgstr ""

#: ../docs/applications/libraries/java.rst:282
msgid "Once the status callback is added to the ApplicationClient, the processDeviceStatus() method is invoked whenever any device is connected or disconnected from IoT Platform that matches the criteria, The following snippet shows how to add the status call back instance into ApplicationClient,"
msgstr ""

#: ../docs/applications/libraries/java.rst:291
msgid "As similar to device status, the application can subscribe to any other application connect or disconnect status as well. Following code snippet shows how to subscribe to the application status in the organization:"
msgstr ""

#: ../docs/applications/libraries/java.rst:299
msgid "Overloaded method is available to control the status subscription to a particular application. The processApplicationStatus() method is called whenever any application is connected or disconnected from IoT Platform that matches the criteria."
msgstr ""

#: ../docs/applications/libraries/java.rst:306
msgid "Publishing events from devices"
msgstr ""

#: ../docs/applications/libraries/java.rst:307
msgid "Applications can publish events as if they originated from a Device."
msgstr ""

#: ../docs/applications/libraries/java.rst:324
msgid "Publish events using HTTP(s)"
msgstr ""

#: ../docs/applications/libraries/java.rst:325
msgid "Apart from MQTT, the application can publish device events to IBM Watson IoT Platform using HTTP(s) by following 3 simple steps,"
msgstr ""

#: ../docs/applications/libraries/java.rst:327
msgid "Construct the ApplicationClient instance using the properties file"
msgstr ""

#: ../docs/applications/libraries/java.rst:328
msgid "Construct the event that needs to be published"
msgstr ""

#: ../docs/applications/libraries/java.rst:329
msgid "Specify the event name, Device Type, Device ID and publish the event using publishEventOverHTTP() method as follows,"
msgstr ""

#: ../docs/applications/libraries/java.rst:343
msgid "The complete code can be found in the application example `HttpApplicationDeviceEventPublish <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdeviceclient/src/com/ibm/iotf/sample/client/application/HttpApplicationDeviceEventPublish.java>`__"
msgstr ""

#: ../docs/applications/libraries/java.rst:345
msgid "Based on the settings in the properties file, the publishEventOverHTTP() method either publishes the event in Quickstart or in Registered flow. When the Organization ID mentioned in the properties file is quickstart, publishEventOverHTTP() method publishes the event to IoT Platform quickstart service and publishes the event in plain HTTP format. But when valid registered organization is mentioned in the properties file, this method always publishes the event in HTTPS (HTTP over SSL), so all the communication is secured."
msgstr ""

#: ../docs/applications/libraries/java.rst:347
msgid "The event in HTTP(s) is published at most once Quality of Service, so the application needs to implement the retry logic when there is an error."
msgstr ""

#: ../docs/applications/libraries/java.rst:354
msgid "Publishing commands to devices"
msgstr ""

#: ../docs/applications/libraries/java.rst:355
msgid "Applications can publish commands to connected devices."
msgstr ""

#: ../docs/applications/libraries/java.rst:374
msgid "Examples"
msgstr ""

#: ../docs/applications/libraries/java.rst:375
msgid "`MQTTApplicationDeviceEventPublish <https://github.com/ibm-messaging/iot-application-samples/blob/master/java/standalone-samples/src/main/java/com/ibm/iotf/sample/client/application/MQTTApplicationDeviceEventPublish.java>`__ - A sample application that shows how to publish device events."
msgstr ""

#: ../docs/applications/libraries/java.rst:376
msgid "`RegisteredApplicationCommandPublish <https://github.com/ibm-messaging/iot-application-samples/blob/master/java/standalone-samples/src/main/java/com/ibm/iotf/sample/client/application/RegisteredApplicationCommandPublish.java>`__ - A sample application that shows how to publish a command to a device."
msgstr ""

#: ../docs/applications/libraries/java.rst:377
msgid "`RegisteredApplicationSubscribeSample <https://github.com/ibm-messaging/iot-application-samples/blob/master/java/standalone-samples/src/main/java/com/ibm/iotf/sample/client/application/RegisteredApplicationSubscribeSample.java>`__ - A sample application that shows how to subscribe for various events like, device events, device commands, device status and application status."
msgstr ""

#: ../docs/applications/libraries/java.rst:378
msgid "`SharedSubscriptionSample <https://github.com/ibm-messaging/iot-application-samples/blob/master/java/standalone-samples/src/main/java/com/ibm/iotf/sample/client/application/SharedSubscriptionSample.java>`__ - A sample application that shows how to build a scalable application which will load balance messages across multiple instances of the application."
msgstr ""

#: ../docs/applications/libraries/java.rst:379
msgid "`Backup and Restore sample <https://github.com/ibm-messaging/iot-backup-restore-sample>`__ - A sample that shows how to backup the device configuration in Cloudant NoSQL DB and restore the same later."
msgstr ""

